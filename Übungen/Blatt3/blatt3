#lang racket
;Aufgabe 1
;1. Hashtable bietet sich an, da zu jedem Key (Buchstaben) genau ein Value (SchlÃ¼ssel) gehÃ¶rt.
(define alphabet (hash #\A "Alfa"
                 #\B "Bravo"
                 #\C "Charlie"
                 #\D "Delta"
                 #\E "Echo"
                 #\F "Foxtrott"
                 #\G "Golf"
                 #\H "Hotel"
                 #\I "India"
                 #\J "Juliett"
                 #\K "Kilo"
                 #\L "Lima"
                 #\M "Mike"
                 #\N "November"
                 #\O "Oscar"
                 #\P "Papa"
                 #\Q "Quebec"
                 #\R "Romeo"
                 #\S "Sierra"
                 #\T "Tango"
                 #\U "Uniform"
                 #\V "Viktor"
                 #\W "Whiskey"
                 #\X "X-ray"
                 #\Y "Yankee"
                 #\Z "Zulu"
                 #\0 "Nadazero"
                 #\1 "Unaone"
                 #\2 "Bissotwo"
                 #\3 "Terrathree"
                 #\4 "Kartefour"
                 #\5 "Pantafive"
                 #\6 "Soxisix"
                 #\7 "Setteseven"
                 #\8 "Oktoeight"
                 #\9 "Novenine"
                 #\, "Decimal"
                 #\. "Stop"
                 #\space " ")
  )

;2.
(define (codierung buchstabe)
  (if (string? buchstabe)
  (hash-ref alphabet (string-ref buchstabe 0))
  (hash-ref alphabet buchstabe)
  )
  )

;3
(define (upper-case char)
  (let ([charint (char->integer char)])
    (if (< 96 charint 123) (integer->char (- charint 32)) char))) 
;4
(define (buchstabieren string)
  (let [(liste (string->list string))]
  (if (> (length liste) 1)
      (string-append (codierung (upper-case(car liste))) " " (buchstabieren (list->string(list-tail liste 1))) )
      (codierung (upper-case(car liste)))
  )
    )
  )
(buchstabieren "NUR GROSSE BUCHSTABEN")
(buchstabieren "Ganz normale Buchstaben")

;Aufgabe 2
(require se3-bib/flaggen-module)
;hier trat folgender Fehler auf
;read (compiled): ill-formed code [./../src/read.c:5181]
; die folgende Aufgabe ist somit ohne testen bearbeitet worden.
;1
; Auch hier haben wir wieder eine hash-map genutzt
(define flaggenalphabet
  (hash #\A A
    #\B B
    #\C C
    #\D D
    #\E E
    #\F F
    #\G G
    #\H H
    #\I I
    #\J J
    #\K K
    #\L L
    #\M M
    #\N N
    #\O O
    #\P P
    #\Q Q
    #\R R
    #\S S
    #\T T
    #\U U
    #\V V
    #\W W
    #\X X
    #\Y Y
    #\Z Z
    #\0 Z0
    #\1 Z1
    #\2 Z2
    #\3 Z3
    #\4 Z4
    #\5 Z5
    #\6 Z6
    #\7 Z7
    #\8 Z8
    #\9 Z9
))


;2.

(define (flagge buchstabe)
  (if (string? buchstabe)
  (hash-ref flaggenalphabet (string-ref buchstabe 0))
  (hash-ref flaggenalphabet buchstabe)
  )
  )

(flagge "A")


;3.

(define (in-flaggen string)
  (let [(liste (string->list string))]
  (if (> (length liste) 1)
      (string-append (flagge (upper-case(car liste))) " " (in-flaggen (list->string(list-tail liste 1))) )
      (flagge (upper-case(car liste)))
  )
    )
  )