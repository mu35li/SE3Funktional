; 1	-> hier fehlen noch Erläuterungen

#|
1. 'Plueschi ;nach Definition. Ist gleichbedeutend mit (quote Plueschi)
2. 'Plueschi ;ruft katze ruft miau auf dann siehe 1.
3. 'miau ; nach Definition
4. 'katze ; nach Definition von quote 
5. 'Plueschi ; führt zunächst katze aus, was wiederum miau ausführt.
6. 'Plueschi : undefined ; versucht Plueschi auszuführen. Plueschie wird aber nie definiert.
7. 'miau ; führt lediglich tiger aus
8. 'harry ; da PersonA bereits durch harry belegt ist, kann let die Variable nicht beeinflussen
9. '(miau katze) ; cdddr ruft 3 mal cdr auf xs1 auf. Somit bleibt nur noch '(miau katze) über 
10. '(Plueschi) ; cdr gibt das zweite element der Liste als Subliste aus, welches wiederum zu 'Plueschi ausgewertet wird
11. 'Plueschi ; cdr auf das Paar xs3 gibt das 2. Element des Paars aus. Dieses wird wieder zu 'Plueschi ausgewertet.
12. 1,732.. ; evaluiert den mathematischen Ausdruck.
13. 'tiger ; führt den gequoteten Ausdruck aus. Dieser ist die Funkiton welcherNameGiltWo
14. 'Plueschi ; führt die Funktion welcherNameGiltWo direkt aus und evaluiert das ergebnis 'katze zu  miau und damit zu 'Plueschi.
|#



; 2.1

(define (fakultaet n)
  (if (= n 0)
      1
      (* n (fakultaet (- n 1)))))



; 2.2 -> ohne rekursion, also noch falsch

(define (power r n)
  (if(= n 0)
  1
  (if(odd? n)
      (* r (expt r (- n 1)))
      (expt (expt r (/ n 2)) 2)
     )  
   )  
  )



; 3

(define (type-of type)
  (cond
    [(boolean? type) (print "Boolean")]
    [(pair? type)(print "Pair")]
    [(list? type)(print "List")]
    [(symbol? type)(print "Symbol")]
    [(number? type)(print "Number")]
    [(char? type)(print "Char")]
    [(string? type)(print "String")]
    [(vector? type)(print "Vector")]
    [(procedure? type)(print "Procedure")]
    [else (print "-")]
    ))

(type-of (* 2 3 4))		; Number
(type-of (not 42))		; Boolean
(type-of '(eins zwei drei))	; Pair
(type-of '())			; List
(define (id z) z)		; Procedure
(type-of (id sin))		; Char
(type-of (string-ref "Harry_Potter_und_der_Stein_der_Weisen" 3))	; Procedure
(type-of (lambda (x) x))	; Procedure
(type-of type-of)		; Procedure
(type-of (type-of type-of))	; -
